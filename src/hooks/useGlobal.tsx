import { create } from "zustand";
import axios from "axios";
import { resolveImageInput } from "../utils/ailabApi";

type GlobalState = {
  isLoading: boolean;
  error: string | null;
  userData: any;
  photos: any[];
  sendData: (initData: any) => void;
  uploadPhoto: (file: File) => Promise<void>;
  fetchPhotos: () => Promise<void>;
  deletePhoto: (photoId: number) => Promise<void>;
};

const useGlobal = create<GlobalState>((set, get) => ({
  isLoading: false,
  error: null,
  userData: null,
  photos: [],

  sendData: async (initData) => {
    set({ isLoading: true, error: null });

    try {
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram
      const response = await axios.post(
        "https://tgbotface.fun/api/telegram/login",
        { initData },
        {
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        }
      );

      const { token, user } = response.data;
      sessionStorage.setItem("token", token);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const extraResponse = await axios.get(
        `http://212.237.217.54:8008/user/${user.telegram_id}`,
        {
          headers: {
            Authorization: "dsfljslfnlkJ^&r68r7UIFiyf^URuyFKJFKJyc",
          },
        }
      );

      const { count_generations, count_video_generations } = extraResponse.data;

      const enrichedUser = {
        ...user,
        count_generations,
        count_video_generations,
      };

      set({ userData: enrichedUser, isLoading: false });
    } catch (error: any) {
      const msg =
        error.response?.data?.detail || error.message || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏";
      set({ error: msg, isLoading: false });
    }
  },

  // üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ
  uploadPhoto: async (file: File) => {
    const token = sessionStorage.getItem("token");
    if (!token) return set({ error: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" });
    const processedFile = await resolveImageInput(file);

    const formData = new FormData();
    formData.append("photo", processedFile);

    try {
      await axios.post("https://tgbotface.fun/api/photos", formData, {
        headers: {
          Authorization: `Bearer ${token}`,
          Accept: "application/json",
        },
      });

      // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ
      await get().fetchPhotos();
    } catch (error: any) {
      const msg =
        error.response?.data?.detail || error.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ";
      set({ error: msg });
    }
  },

  // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ
  fetchPhotos: async () => {
    const token = sessionStorage.getItem("token");
    if (!token) return set({ error: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" });

    try {
      const res = await axios.get("https://tgbotface.fun/api/photos", {
        headers: {
          Authorization: `Bearer ${token}`,
          Accept: "application/json",
        },
      });
      console.log(res.data, "res");
      set({ photos: res.data });
    } catch (error: any) {
      const msg =
        error.response?.data?.detail ||
        error.message ||
        "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ";
      set({ error: msg });
    }
  },

  // üîπ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ ID
  deletePhoto: async (photoId: number) => {
    const token = sessionStorage.getItem("token");
    if (!token) return set({ error: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" });

    try {
      await axios.delete(`https://tgbotface.fun/api/photos/${photoId}`, {
        headers: {
          Authorization: `Bearer ${token}`,
          Accept: "application/json",
        },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      await get().fetchPhotos();
    } catch (error: any) {
      const msg =
        error.response?.data?.detail || error.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ";
      set({ error: msg });
    }
  },
}));

export default useGlobal;
